---
jobs:
- name: configure-pipeline
  plan:
  - in_parallel:
    - get: pipeline-source
      trigger: true
      params: {depth: 1}
  - set_pipeline: self
    file: pipeline-source/ci/pipeline.yml

- name: audit-hardened-concourse-task-staging-image
  plan:
  - in_parallel: &common_resources
    - get: monthly
      trigger: true
    - get: scan-source
      trigger: false
  - get: image-source
    params:
      format: oci
    resource: ecr-hardened-concourse-task-staging-repo
  - task: audit
    file: scan-source/ci/audit-ecr-container.yml
    vars:
      image: harden-concourse-task-staging
  on_success:
    put: send-an-email
    params:
      subject_text: "Passed - Audit for the latest harden-concourse-task-staging image"
      body_text: "The audit for the latest harden-concourse-task-staging image passed successfully. Results are attached."
      attachment_globs: ["audit/cis-audit.html"]
  on_failure:
    put: send-an-email
    params:
      subject_text: "Failed - Audit for latest harden-concourse-task-staging image"
      body_text: "The audit for the latest harden-concourse-task-staging image contains failures. Results are attached."
      attachment_globs: ["audit/cis-audit.html"]

- name: audit-hardened-s3-resource-simple-staging-image
  plan:
  - in_parallel: *common_resources
  - get: image-source
    params:
      format: oci
    resource: ecr-hardened-s3-resource-simple-staging-repo
  - task: audit
    file: scan-source/ci/audit-ecr-container.yml
    vars:
      image: harden-s3-resource-simple-staging
  on_success:
    put: send-an-email
    params:
      subject_text: "Passed - Audit for the harden-s3-resource-simple-staging image"
      body_text: "The audit for the latest harden-s3-resource-simple-staging image passed successfully. Results are attached."
      attachment_globs: ["audit/cis-audit.html"]
  on_failure:
    put: send-an-email
    params:
      subject_text: "Failed - Audit for latest harden-s3-resource-simple-staging image"
      body_text: "The audit for the latest harden-s3-resource-simple-staging image contains failures. Results are attached."
      attachment_globs: ["audit/cis-audit.html"]

- name: conmon-hardened-concourse-task-image
  plan:
  - in_parallel: *common_resources
  - get: image-source
    params:
      format: oci
    resource: ecr-harden-concourse-task-repo
  - task: prep-email
    file: scan-source/ci/conmon-scan-ecr-container.yml
    params:
      FILE: concourse-task
      IMAGE: "((harden-concourse-task-repo))"
      AWS_DEFAULT_REGION: us-gov-west-1
      REGISTRY: ((aws-ecr-registry))
  on_success:
    put: send-an-email
    params:
      subject_text: "ConMon Results for harden-concourse-task image scans"
      body_text: "Here is the conmon results for harden-concourse-task"
      attachment_globs: ["output/concourse-task.xml"]
  on_failure:
    put: send-an-email
    params:
      subject_text: "ConMon Results for harden-concourse-task image scans - Failure"
      body_text: "The pipeline for conmon-hardened-concourse-task-image has failed! Please check me out *wink*"

- name: conmon-hardened-s3-resource-simple-image
  plan:
  - in_parallel: *common_resources
  - get: image-source
    params:
      format: oci
    resource: ecr-harden-s3-resource-simple-repo
  - task: prep-email
    file: scan-source/ci/conmon-scan-ecr-container.yml
    params:
      FILE: s3-resource-simple
      IMAGE: "((harden-s3-resource-simple-repo))"
      AWS_DEFAULT_REGION: us-gov-west-1
      REGISTRY: ((aws-ecr-registry))
  on_success:
    put: send-an-email
    params:
      subject_text: "ConMon Results for harden-s3-resource-simple image scans"
      body_text: "Here is the conmon results for s3-resource-simple"
      attachment_globs: ["output/s3-resource-simple.xml"]
  on_failure:
    put: send-an-email
    params:
      subject_text: "ConMon Results for harden-s3-resource-simple image scans - Failure"
      body_text: "The pipeline for conmon-hardened-s3-resource-simple-image has failed! Please check me out *wink*"

- name: conmon-18fgsa-sql-clients-image
  plan:
  - in_parallel: *common_resources
  - get: image-source
    params:
      format: oci
    resource: ecr-sql-clients
  - task: prep-email
    file: scan-source/ci/conmon-scan-ecr-container.yml
    params:
      FILE: sql-clients
      IMAGE: "((sql-clients-repo))"
      AWS_DEFAULT_REGION: us-gov-west-1
      REGISTRY: ((aws-ecr-registry))
  on_success:
    put: send-an-email
    params:
      subject_text: "ConMon Results for sql-clients image scans"
      body_text: "Here is the conmon results for sql-clients"
      attachment_globs: ["output/sql-clients.xml"]
  on_failure:
    put: send-an-email
    params:
      subject_text: "ConMon Results for sql-clients image scans - Failure"
      body_text: "The pipeline for conmon-18fgsa-sql-clients-image has failed! Please check me out *wink*"

- name: scan-latest-hardened-concourse-task-staging-image
  plan:
  - in_parallel:
    - get: weekly
      trigger: true
    - get: scan-source
      trigger: false
    - get: ecr-hardened-concourse-task-staging-repo
      params:
        format: oci
      trigger: true
  - load_var: tag
    file: ecr-hardened-concourse-task-staging-repo/tag
  - task: scan
    file: scan-source/ci/scan-ecr-container.yml
    params:
      IMAGE: "((harden-concourse-task-staging-repo)):((.:tag))"
      AWS_DEFAULT_REGION: us-gov-west-1
      REGISTRY: ((aws-ecr-registry))
  - task: check
    file: scan-source/ci/ecr-cve-check.yml
    params:
      IMAGE: "((harden-concourse-task-staging-repo)):((.:tag))"
      IMAGENAME: "harden-concourse-task-staging:((.:tag))"
    on_failure:
      put: slack
      params:
        text:  |
          :x: FAILED harden-concourse-task-staging CVE check
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: '#cg-platform-news'
        username: ((username))
        icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40
    on_success:
      put: slack
      params:
        text_file: message/alert.txt
        text: |
          $TEXT_FILE_CONTENT
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: '#cg-platform-news'
        username: ((username))
        icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40

- name: scan-latest-hardened-s3-resource-simple-staging-image
  plan:
  - in_parallel:
    - get: weekly
      trigger: true
    - get: scan-source
      trigger: false
    - get: ecr-hardened-s3-resource-simple-staging-repo
      params:
        format: oci
      trigger: true
  - load_var: tag
    file: ecr-hardened-s3-resource-simple-staging-repo/tag
  - task: scan
    file: scan-source/ci/scan-ecr-container.yml
    params:
      IMAGE: "((harden-s3-resource-simple-staging-repo)):((.:tag))"
      AWS_DEFAULT_REGION: us-gov-west-1
      REGISTRY: ((aws-ecr-registry))
  - task: check
    file: scan-source/ci/ecr-cve-check.yml
    params:
      IMAGE: "((harden-s3-resource-simple-staging-repo)):((.:tag))"
      IMAGENAME: "harden-s3-resource-simple-staging:((.:tag))"
    on_failure:
      put: slack
      params:
        text:  |
          :x: FAILED harden-s3-resource-simple-staging CVE check
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: '#cg-platform-news'
        username: ((username))
        icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40
    on_success:
      put: slack
      params:
        text_file: message/alert.txt
        text: |
          $TEXT_FILE_CONTENT
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: '#cg-platform-news'
        username: ((username))
        icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40

- name: scan-oracle-client-docker-image
  plan:
  - in_parallel:
    - get: weekly
      trigger: true
    - get: oracle-client-docker-repo
      params:
        format: oci
      trigger: true
    - get: scan-source
      trigger: false
  - task: scan
    file: scan-source/ci/scan-container.yml
    params:
      IMAGE: 18fgsa/oracle-client
  - task: check
    file: scan-source/ci/cve-check.yml
    params:
      IMAGE: 18fgsa/oracle-client
  - put: ecr-oracle-client
    params:
      image: oracle-client-docker-repo/image.tar
      additional_tags: oracle-client-docker-repo/tag
  on_failure:
    put: slack
    params:
      text:  |
        :x: FAILED to upload oracle-client image to ECR
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: '#cg-platform-news'
      username: ((username))
      icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40
  on_success:
    put: slack
    params:
      text_file: message/alert.txt
      text: |
        :white_check_mark: $TEXT_FILE_CONTENT
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: '#cg-platform-news'
      username: ((username))
      icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40

- name: scan-sql-clients-docker-image
  plan:
  - in_parallel:
    - get: weekly
      trigger: true
    - get: sql-clients-docker-repo
      params:
        format: oci
      trigger: true
    - get: scan-source
      trigger: false
  - task: scan
    file: scan-source/ci/scan-container.yml
    params:
      IMAGE: 18fgsa/sql-clients
  - task: check
    file: scan-source/ci/cve-check.yml
    params:
      IMAGE: 18fgsa/sql-clients
  - put: ecr-sql-clients
    params:
      image: sql-clients-docker-repo/image.tar
      additional_tags: sql-clients-docker-repo/tag
  on_failure:
    put: slack
    params:
      text:  |
        :x: FAILED to upload sql-clients image to ECR
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: '#cg-platform-news'
      username: ((username))
      icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40
  on_success:
    put: slack
    params:
      text_file: message/alert.txt
      text: |
        :white_check_mark: $TEXT_FILE_CONTENT
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: '#cg-platform-news'
      username: ((username))
      icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40

- name: terraform-plan-ecr
  plan:
  - in_parallel:
    - get: terraform-templates
      resource: terraform-config
      trigger: true
    - get: pipeline-tasks
  - task: terraform-plan
    file: terraform-templates/terraform/terraform-apply.yml
    params: &tf-ecr
      TERRAFORM_ACTION: plan
      TEMPLATE_SUBDIR: terraform/
      STACK_NAME: ecr
      S3_TFSTATE_BUCKET: ((tf-state-bucket))
      AWS_DEFAULT_REGION: us-gov-west-1
      TF_VAR_remote_state_bucket: ((tf-state-bucket))
      TF_VAR_tooling_stack_name: tooling
  - put: slack
    params:
      text_file: terraform-state/message.txt
      text:  |
        :terraform: $BUILD_JOB_NAME needs review
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: '#cg-platform'
      username: ((username))
      icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40

- name: terraform-apply-ecr
  plan:
  - in_parallel:
    - get: terraform-templates
      resource: terraform-config
      passed: [terraform-plan-ecr]
      trigger: true
    - get: pipeline-tasks
      passed: [terraform-plan-ecr]
  - task: terraform-apply
    file: terraform-templates/terraform/terraform-apply.yml
    params:
      <<: *tf-ecr
      TERRAFORM_ACTION: apply

- name: list-tags-oracle-client
  plan:
  - in_parallel:
    - get: scan-source
      passed: [scan-oracle-client-docker-image]
    - get: weekly
      trigger: true
  - task: list-images
    file: scan-source/ci/list-images.yml
    params:
      AWS_DEFAULT_REGION: us-gov-west-1
      IMAGE_REPOSITORY: oracle-client
      S3_TFSTATE_BUCKET: ((tf-state-bucket))
      STACK_NAME: ecr

- name: list-tags-sql-clients
  plan:
  - in_parallel:
    - get: scan-source
      passed: [scan-sql-clients-docker-image]
    - get: weekly
      trigger: true
  - task: list-images
    file: scan-source/ci/list-images.yml
    params:
      AWS_DEFAULT_REGION: us-gov-west-1
      IMAGE_REPOSITORY: sql-clients
      S3_TFSTATE_BUCKET: ((tf-state-bucket))
      STACK_NAME: ecr

- name: list-tags-hardened-concourse-task
  plan:
  - in_parallel:
    - get: scan-source
      passed: [upload-hardened-concourse-task-prod-image]
    - get: weekly
      trigger: true
    - get: ecr-harden-concourse-task-repo
  - task: list-images
    file: scan-source/ci/list-images.yml
    params:
      AWS_DEFAULT_REGION: us-gov-west-1
      IMAGE_REPOSITORY: harden-concourse-task
      S3_TFSTATE_BUCKET: ((tf-state-bucket))
      STACK_NAME: ecr

- name: list-tags-hardened-concourse-task-staging
  plan:
  - in_parallel:
    - get: scan-source
      passed: [scan-latest-hardened-concourse-task-staging-image]
    - get: weekly
      trigger: true
    - get: ecr-hardened-concourse-task-staging-repo
  - task: list-images
    file: scan-source/ci/list-images.yml
    params:
      AWS_DEFAULT_REGION: us-gov-west-1
      IMAGE_REPOSITORY: harden-concourse-task-staging
      S3_TFSTATE_BUCKET: ((tf-state-bucket))
      STACK_NAME: ecr

- name: list-tags-hardened-s3-resource-simple
  plan:
  - in_parallel:
    - get: scan-source
      passed: [upload-hardened-s3-resource-simple-prod-image]
    - get: weekly
      trigger: true
    - get: ecr-harden-s3-resource-simple-repo
  - task: list-images
    file: scan-source/ci/list-images.yml
    params:
      AWS_DEFAULT_REGION: us-gov-west-1
      IMAGE_REPOSITORY: harden-s3-resource-simple
      S3_TFSTATE_BUCKET: ((tf-state-bucket))
      STACK_NAME: ecr

- name: list-tags-hardened-s3-resource-simple-staging
  plan:
  - in_parallel:
    - get: scan-source
      passed: [scan-latest-hardened-s3-resource-simple-staging-image]
    - get: weekly
      trigger: true
    - get: ecr-hardened-s3-resource-simple-staging-repo
  - task: list-images
    file: scan-source/ci/list-images.yml
    params:
      AWS_DEFAULT_REGION: us-gov-west-1
      IMAGE_REPOSITORY: harden-s3-resource-simple-staging
      S3_TFSTATE_BUCKET: ((tf-state-bucket))
      STACK_NAME: ecr

- name: scan-ecr-oracle-client
  plan:
  - in_parallel:
    - get: image-tags-oracle-client
      trigger: true
    - get: weekly
      trigger: true
      passed: [list-tags-oracle-client]
    - get: scan-source
      trigger: false
      passed: [list-tags-oracle-client]
  - load_var: tags
    file: image-tags-oracle-client/tags-oracle-client.json
  - across:
    - var: tag
      values: ((.:tags))
    do:
    - task: scan
      file: scan-source/ci/scan-ecr-container.yml
      params:
        IMAGE: "((oracle-client-repo)):((.:tag))"
        AWS_DEFAULT_REGION: us-gov-west-1
        REGISTRY: ((aws-ecr-registry))
    - task: check
      file: scan-source/ci/ecr-cve-check.yml
      params:
        IMAGE: "((oracle-client-repo)):((.:tag))"
        IMAGENAME: "oracle-client:((.:tag))"
      on_failure:
        put: slack
        params:
          text:  |
            :x: FAILED oracle-client CVE check
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: '#cg-platform-news'
          username: ((username))
          icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40
      on_success:
        put: slack
        params:
          text_file: message/alert.txt
          text: |
            :white_check_mark: $TEXT_FILE_CONTENT
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: '#cg-platform-news'
          username: ((username))
          icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40

- name: scan-ecr-sql-clients
  plan:
  - in_parallel:
    - get: image-tags-sql-clients
      trigger: true
    - get: weekly
      trigger: true
      passed: [list-tags-sql-clients]
    - get: scan-source
      trigger: false
      passed: [list-tags-sql-clients]
  - load_var: tags
    file: image-tags-sql-clients/tags-sql-clients.json
  - across:
    - var: tag
      values: ((.:tags))
    do:
    - task: scan
      file: scan-source/ci/scan-ecr-container.yml
      params:
        IMAGE: "((sql-clients-repo)):((.:tag))"
        AWS_DEFAULT_REGION: us-gov-west-1
        REGISTRY: ((aws-ecr-registry))
    - task: check
      file: scan-source/ci/ecr-cve-check.yml
      params:
        IMAGE: "((sql-clients-repo)):((.:tag))"
        IMAGENAME: "sql-clients:((.:tag))"
      on_failure:
        put: slack
        params:
          text:  |
            :x: FAILED sql-clients CVE check
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: '#cg-platform-news'
          username: ((username))
          icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40
      on_success:
        put: slack
        params:
          text_file: message/alert.txt
          text: |
            :white_check_mark: $TEXT_FILE_CONTENT
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: '#cg-platform-news'
          username: ((username))
          icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40

- name: scan-hardened-concourse-task-staging-image
  plan:
  - in_parallel:
    - get: image-tags-harden-concourse-task-staging
      trigger: true
    - get: weekly
      trigger: true
      passed: [list-tags-hardened-concourse-task-staging]
    - get: scan-source
      trigger: false
      passed: [list-tags-hardened-concourse-task-staging]
  - load_var: tags
    file: image-tags-harden-concourse-task-staging/tags-harden-concourse-task.json
  - across:
    - var: tag
      values: ((.:tags))
    do:
    - task: scan
      file: scan-source/ci/scan-ecr-container.yml
      params:
        IMAGE: "((harden-concourse-task-staging-repo)):((.:tag))"
        AWS_DEFAULT_REGION: us-gov-west-1
        REGISTRY: ((aws-ecr-registry))
    - task: check
      file: scan-source/ci/ecr-cve-check.yml
      params:
        IMAGE: "((harden-concourse-task-staging-repo)):((.:tag))"
        IMAGENAME: "harden-concourse-task-staging:((.:tag))"
      on_failure:
        put: slack
        params:
          text:  |
            :x: FAILED harden-concourse-task CVE check
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: '#cg-platform-news'
          username: ((username))
          icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40
      on_success:
        put: slack
        params:
          text_file: message/alert.txt
          text: |
            $TEXT_FILE_CONTENT
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: '#cg-platform-news'
          username: ((username))
          icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40

- name: scan-hardened-concourse-task-image
  plan:
  - in_parallel:
    - get: image-tags-harden-concourse-task
      trigger: true
    - get: weekly
      trigger: true
      passed: [list-tags-hardened-concourse-task]
    - get: scan-source
      trigger: false
      passed: [list-tags-hardened-concourse-task]
  - load_var: tags
    file: image-tags-harden-concourse-task/tags-harden-concourse-task.json
  - across:
    - var: tag
      values: ((.:tags))
    do:
    - task: scan
      file: scan-source/ci/scan-ecr-container.yml
      params:
        IMAGE: "((harden-concourse-task-repo)):((.:tag))"
        AWS_DEFAULT_REGION: us-gov-west-1
        REGISTRY: ((aws-ecr-registry))
    - task: check
      file: scan-source/ci/ecr-cve-check.yml
      params:
        IMAGE: "((harden-concourse-task-repo)):((.:tag))"
        IMAGENAME: "harden-concourse-task:((.:tag))"
      on_failure:
        put: slack
        params:
          text:  |
            :x: FAILED harden-concourse-task CVE check
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: '#cg-platform-news'
          username: ((username))
          icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40
      on_success:
        put: slack
        params:
          text_file: message/alert.txt
          text: |
            $TEXT_FILE_CONTENT
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: '#cg-platform-news'
          username: ((username))
          icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40

- name: scan-hardened-s3-resource-simple-staging-image
  plan:
  - in_parallel:
    - get: image-tags-harden-s3-resource-simple-staging
      trigger: true
    - get: weekly
      trigger: true
      passed: [list-tags-hardened-s3-resource-simple-staging]
    - get: scan-source
      trigger: false
      passed: [list-tags-hardened-s3-resource-simple-staging]
  - load_var: tags
    file: image-tags-harden-s3-resource-simple-staging/tags-harden-s3-resource-simple-staging.json
  - across:
    - var: tag
      values: ((.:tags))
    do:
    - task: scan
      file: scan-source/ci/scan-ecr-container.yml
      params:
        IMAGE: "((harden-s3-resource-simple-staging-repo)):((.:tag))"
        AWS_DEFAULT_REGION: us-gov-west-1
        REGISTRY: ((aws-ecr-registry))
    - task: check
      file: scan-source/ci/ecr-cve-check.yml
      params:
        IMAGE: "((harden-s3-resource-simple-staging-repo)):((.:tag))"
        IMAGENAME: "harden-s3-resource-simple-staging:((.:tag))"
      on_failure:
        put: slack
        params:
          text:  |
            :x: FAILED harden-s3-resource-simple CVE check
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: '#cg-platform-news'
          username: ((username))
          icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40

- name: scan-hardened-s3-resource-simple-image
  plan:
  - in_parallel:
    - get: image-tags-harden-s3-resource-simple
      trigger: true
    - get: weekly
      trigger: true
      passed: [list-tags-hardened-s3-resource-simple]
    - get: scan-source
      trigger: false
      passed: [list-tags-hardened-s3-resource-simple]
  - load_var: tags
    file: image-tags-harden-s3-resource-simple/tags-harden-s3-resource-simple.json
  - across:
    - var: tag
      values: ((.:tags))
    do:
    - task: scan
      file: scan-source/ci/scan-ecr-container.yml
      params:
        IMAGE: "((harden-s3-resource-simple-repo)):((.:tag))"
        AWS_DEFAULT_REGION: us-gov-west-1
        REGISTRY: ((aws-ecr-registry))
    - task: check
      file: scan-source/ci/ecr-cve-check.yml
      params:
        IMAGE: "((harden-s3-resource-simple-repo)):((.:tag))"
        IMAGENAME: "harden-s3-resource-simple:((.:tag))"
      on_failure:
        put: slack
        params:
          text:  |
            :x: FAILED harden-s3-resource-simple CVE check
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: '#cg-platform-news'
          username: ((username))
          icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40
      on_success:
        put: slack
        params:
          text_file: message/alert.txt
          text: |
            $TEXT_FILE_CONTENT
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: '#cg-platform-news'
          username: ((username))
          icon_url: https://avatars1.githubusercontent.com/u/7809479?v=3&s=40

- name: upload-hardened-concourse-task-prod-image
  plan:
  - in_parallel:
    - get: scan-source
    - get: image-source
      params:
        format: oci
      resource: ecr-hardened-concourse-task-staging-repo
      passed: [scan-latest-hardened-concourse-task-staging-image, audit-hardened-concourse-task-staging-image]
      trigger: true
    - get: hardened-concourse-task-image-prod-version
      params: {bump: patch}
  - put: ecr-harden-concourse-task-repo
    params:
      image: image-source/image.tar
      additional_tags: hardened-concourse-task-image-prod-version/version
  - put: hardened-concourse-task-image-prod-version
    params: {file: hardened-concourse-task-image-prod-version/version}

- name: upload-hardened-s3-resource-simple-prod-image
  plan:
  - in_parallel:
    - get: scan-source
    - get: image-source
      params:
        format: oci
      resource: ecr-hardened-s3-resource-simple-staging-repo
      passed: [scan-latest-hardened-s3-resource-simple-staging-image, audit-hardened-s3-resource-simple-staging-image]
      trigger: true
    - get: hardened-s3-resource-simple-image-prod-version
      params: {bump: patch}
  - put: ecr-harden-s3-resource-simple-repo
    params:
      image: image-source/image.tar
      additional_tags: hardened-s3-resource-simple-image-prod-version/version
  - put: hardened-s3-resource-simple-image-prod-version
    params: {file: hardened-s3-resource-simple-image-prod-version/version}

resources:
- name: pipeline-source
  type: git
  source:
    uri: https://github.com/cloud-gov/container-scanning
    branch: main
    paths: [ci/*]
    commit_verification_keys: ((cloud-gov-pgp-keys))

- name: scan-source
  type: git
  source:
    uri: https://github.com/cloud-gov/container-scanning
    branch: main
    paths: ["ci/scan-container.sh",
            "ci/scan-container.yml",
            "ci/scan-ecr-container.sh",
            "ci/scan-ecr-container.yml",
            "ci/scan-ecr-container-no-ignore.sh",
            "ci/scan-ecr-container-no-ignore.yml",
            "ci/conmon-scan-ecr-container.sh",
            "ci/conmon-scan-ecr-container.yml",
            "ci/list-images.sh",
            "ci/list-images.yml",
            "ci/delete-image.sh",
            "ci/delete-image.yml",
            "ci/cve-check.sh",
            "ci/cve-check.yml",
            "ci/audit-ecr-container.sh",
            "ci/audit-ecr-container.yml",
            "ci/ecr-cve-check.sh",
            "ci/ecr-cve-check.yml",
            "ci/grype.yml",
            "templates/conmon_csv.tmpl"]
    commit_verification_keys: ((cloud-gov-pgp-keys))      

- name: terraform-config
  type: git
  source:
    uri: https://github.com/cloud-gov/container-scanning
    branch: main
    paths: [terraform/*]
    commit_verification_keys: ((cloud-gov-pgp-keys))

- name: pipeline-tasks
  type: git
  source:
    uri: https://github.com/cloud-gov/cg-pipeline-tasks.git
    branch: main
    commit_verification_keys: ((cloud-gov-pgp-keys))

- name: oracle-client-docker-repo
  type: registry-image
  source:
    repository: 18fgsa/oracle-client
    semver_constraint: ">= 1.0.0"

- name: sql-clients-docker-repo
  type: registry-image
  source:
    repository: 18fgsa/sql-clients
    semver_constraint: ">= 1.0.0"

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

- name: weekly
  type: time
  source:
    days: [Tuesday]

- name: ecr-oracle-client
  type: registry-image
  source:
    aws_access_key_id: ((aws-key))
    aws_secret_access_key: ((aws-secret))
    repository: oracle-client
    aws_region: us-gov-west-1
    semver_constraint: ">= 1.0.0"

- name: ecr-sql-clients
  type: registry-image
  source:
    aws_access_key_id: ((aws-key))
    aws_secret_access_key: ((aws-secret))
    repository: sql-clients
    aws_region: us-gov-west-1
    semver_constraint: ">= 1.0.0"

- name: ecr-harden-concourse-task-repo
  type: registry-image
  source:
    aws_access_key_id: ((aws-key))
    aws_secret_access_key: ((aws-secret))
    repository: harden-concourse-task
    aws_region: us-gov-west-1
    semver_constraint: ">= 1.0.0"

- name: ecr-hardened-concourse-task-staging-repo
  type: registry-image
  source:
    aws_access_key_id: ((aws-key))
    aws_secret_access_key: ((aws-secret))
    repository: harden-concourse-task-staging
    aws_region: us-gov-west-1
    semver_constraint: ">= 1.0.0"

- name: ecr-hardened-s3-resource-simple-staging-repo
  type: registry-image
  source:
    aws_access_key_id: ((aws-key))
    aws_secret_access_key: ((aws-secret))
    repository: harden-s3-resource-simple-staging
    aws_region: us-gov-west-1
    semver_constraint: ">= 1.0.0"

- name: ecr-harden-s3-resource-simple-repo
  type: registry-image
  source:
    aws_access_key_id: ((aws-key))
    aws_secret_access_key: ((aws-secret))
    repository: harden-s3-resource-simple
    aws_region: us-gov-west-1
    semver_constraint: ">= 1.0.0"

- name: image-tags-oracle-client
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ecr/tags-oracle-client.json
    region_name: us-gov-west-1

- name: image-tags-sql-clients
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ecr/tags-sql-clients.json
    region_name: us-gov-west-1

- name: image-tags-harden-concourse-task-staging
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ecr/tags-harden-concourse-task-staging.json
    region_name: us-gov-west-1

- name: image-tags-harden-concourse-task
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ecr/tags-harden-concourse-task.json
    region_name: us-gov-west-1

- name: image-tags-harden-s3-resource-simple-staging
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ecr/tags-harden-s3-resource-simple-staging.json
    region_name: us-gov-west-1

- name: image-tags-harden-s3-resource-simple
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ecr/tags-harden-s3-resource-simple.json
    region_name: us-gov-west-1

- name: send-an-email
  type: email-resource
  source:
    smtp:
      host: ((smtp-host))
      port: ((smtp-port))
      username: ((smtp-cloudgovbilling.username))
      password: ((smtp-cloudgovbilling.password))
      ca_cert: ((smtp-cert.certificate))
    from: ((smtp-email-from))
    to: [((smtp-email-to))]

- name: monthly
  type: cron-resource
  source:
    expression: "0 6 22 * *"
    location: "America/New_York"
    fire_immediately: true

- name: hardened-concourse-task-image-prod-version
  type: semver
  source:
    driver: s3
    bucket: ((semver-bucket))
    key: harden-concourse-docker-image-version
    access_key_id: ((aws-access-key-id))
    secret_access_key: ((aws-secret-access-key))
    region_name: ((aws-region))
    initial_version: 1.0.0

- name: hardened-s3-resource-simple-image-prod-version
  type: semver
  source:
    driver: s3
    bucket: ((semver-bucket))
    key: harden-s3-resource-simple-image-version
    access_key_id: ((aws-access-key-id))
    secret_access_key: ((aws-secret-access-key))
    region_name: ((aws-region))
    initial_version: 1.0.0

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

- name: email-resource
  type: docker-image
  source:
    repository: pcfseceng/email-resource
    tag: latest

- name: cron-resource
  type: docker-image
  source:
    repository: cftoolsmiths/cron-resource

- name: s3-simple
  type: docker-image
  source:
    repository: 18fgsa/s3-resource-simple

groups:
- name: all
  jobs:
  - configure-pipeline
  - audit-hardened-concourse-task-staging-image
  - audit-hardened-s3-resource-simple-staging-image
  - conmon-hardened-concourse-task-image
  - conmon-hardened-s3-resource-simple-image
  - conmon-18fgsa-sql-clients-image
  - scan-oracle-client-docker-image
  - scan-sql-clients-docker-image
  - terraform-plan-ecr
  - terraform-apply-ecr
  - list-tags-oracle-client
  - list-tags-sql-clients
  - list-tags-hardened-concourse-task
  - list-tags-hardened-s3-resource-simple
  - list-tags-hardened-concourse-task-staging
  - list-tags-hardened-s3-resource-simple-staging
  - scan-ecr-oracle-client
  - scan-ecr-sql-clients
  - scan-hardened-concourse-task-staging-image
  - scan-hardened-s3-resource-simple-staging-image
  - scan-latest-hardened-concourse-task-staging-image
  - scan-latest-hardened-s3-resource-simple-staging-image
  - scan-hardened-concourse-task-image
  - scan-hardened-s3-resource-simple-image
  - upload-hardened-concourse-task-prod-image
  - upload-hardened-s3-resource-simple-prod-image
- name: docker-scan
  jobs:
  - scan-oracle-client-docker-image
  - scan-sql-clients-docker-image
- name: tags
  jobs:
  - list-tags-oracle-client
  - list-tags-sql-clients
  - list-tags-hardened-concourse-task
  - list-tags-hardened-s3-resource-simple
  - list-tags-hardened-concourse-task-staging
  - list-tags-hardened-s3-resource-simple-staging
- name: ecr-scan
  jobs:
  - scan-ecr-oracle-client
  - scan-ecr-sql-clients
- name: conmon-scan
  jobs:
  - conmon-hardened-concourse-task-image
  - conmon-hardened-s3-resource-simple-image
  - conmon-18fgsa-sql-clients-image
- name: hardened-scan
  jobs:
  - scan-latest-hardened-concourse-task-staging-image
  - scan-latest-hardened-s3-resource-simple-staging-image
  - list-tags-hardened-concourse-task
  - list-tags-hardened-s3-resource-simple
  - list-tags-hardened-concourse-task-staging
  - list-tags-hardened-s3-resource-simple-staging
  - scan-hardened-concourse-task-image
  - scan-hardened-s3-resource-simple-image
- name: terraform
  jobs:
  - terraform-plan-ecr
  - terraform-apply-ecr
- name: audit
  jobs:
  - audit-hardened-concourse-task-staging-image
  - audit-hardened-s3-resource-simple-staging-image
